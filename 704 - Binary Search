Pattern :
------------------------------------------------------------------------------
1>Classical Approach takes O(N) TC.
2> Binary Search Algorithm provides TC of O(log N), which marks more efficient.


Test Cases :
------------------------------------------------------------------------------
nums = [-1,0,3,5,9,12] target = 3   |  2
nums = [-1,0,3,5,9,12] target = 2   |  -1



Code : 
-----------------------------------------------------------------------------
/*
class Solution {
    public int search(int[] nums, int target) {
        for(int i=0;i<nums.length;i++){
            if(target==nums[i]){                                            // classical approach : O(N)
                return i;
            }
            
        }
        return -1;
    }    
} */

class Solution{
    public int search(int[] nums,int target){
        int pos1 = 0;
        int n = nums.length;
        int pos2 = n-1;
        while(pos1<=pos2){
            int mid = (pos1+pos2)/2;                                          // efficient approach : O(log N)
            if(nums[mid] == target){
                return mid;
            }
            else{
                if(target<nums[mid]){
                    pos2=mid - 1;
                }
                else{
                    pos1=mid+1;
                }
            }
        }
        return -1;
    }
}

